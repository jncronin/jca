// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-JOHN
// DateTime: 23/01/2016 15:13:10
// UserName: jncro
// Input file <jcasm.y - 23/01/2016 15:13:09>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace jcasm
{
internal enum Tokens {error=2,EOF=3,NEWLINE=4,COMMA=5,COLON=6,
    ASSIGN=7,SEMICOLON=8,DOT=9,LPAREN=10,RPAREN=11,TEXT=12,
    DATA=13,RODATA=14,BSS=15,FILE=16,GLOBL=17,LOCAL=18,
    EXTERN=19,COMM=20,ALIGN=21,TYPE=22,SIZE=23,IDENT=24,
    SECTION=25,DB=26,DW=27,DD=28,AT=29,LOR=30,
    LAND=31,OR=32,AND=33,EQUALS=34,NOTEQUAL=35,LT=36,
    GT=37,LEQUAL=38,GEQUAL=39,PLUS=40,MINUS=41,MUL=42,
    NOT=43,LNOT=44,INT=45,STRING=46,LABEL=47,LOCLABEL=48,
    CC=49,REG=50};

internal partial struct ValueType
#line 13 "jcasm.y"
       {
		public int intval;
		public string strval;
		public Statement stmtval;
		public Condition condval;
		public List<Expression> dilist;
		public DataDirective.DDType ddtype;
		public Expression exprval;
	}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[84];
  private static State[] states = new State[134];
  private static string[] nonTerms = new string[] {
      "file", "stmtlist", "stmt", "instruction", "directive", "line_label", "cond", 
      "data_list", "data_directive", "anylabel", "sectionname", "expr", "expr2", 
      "expr3", "expr4", "expr5", "expr6", "expr7", "expr8", "expr9", "expr10", 
      "expr11", "operand2", "dest", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{26,65,27,66,28,67,12,68,13,69,14,70,15,71,16,72,17,74,18,76,19,78,21,80,22,82,23,87,24,91,20,93,25,99,47,112,48,126,8,131,4,132,3,-2},new int[]{-1,1,-2,3,-3,133,-5,5,-9,9,-6,111,-4,128});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{26,65,27,66,28,67,12,68,13,69,14,70,15,71,16,72,17,74,18,76,19,78,21,80,22,82,23,87,24,91,20,93,25,99,47,112,48,126,8,131,4,132,3,-3},new int[]{-3,4,-5,5,-9,9,-6,111,-4,128});
    states[4] = new State(-5);
    states[5] = new State(new int[]{8,6,4,8});
    states[6] = new State(new int[]{4,7});
    states[7] = new State(-6);
    states[8] = new State(-7);
    states[9] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53,8,-48,4,-48},new int[]{-8,10,-12,11,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[10] = new State(-13);
    states[11] = new State(new int[]{5,12,8,-49,4,-49});
    states[12] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53,8,-48,4,-48},new int[]{-8,13,-12,11,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[13] = new State(-50);
    states[14] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-13,15,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[15] = new State(new int[]{11,16});
    states[16] = new State(-54);
    states[17] = new State(new int[]{30,18,5,-57,8,-57,4,-57,11,-57,7,-57});
    states[18] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-13,19,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[19] = new State(-56);
    states[20] = new State(new int[]{31,21,30,-59,5,-59,8,-59,4,-59,11,-59,7,-59});
    states[21] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-14,22,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[22] = new State(-58);
    states[23] = new State(new int[]{32,24,31,-61,30,-61,5,-61,8,-61,4,-61,11,-61,7,-61});
    states[24] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-15,25,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[25] = new State(-60);
    states[26] = new State(new int[]{33,27,32,-63,31,-63,30,-63,5,-63,8,-63,4,-63,11,-63,7,-63});
    states[27] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-16,28,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[28] = new State(-62);
    states[29] = new State(new int[]{34,30,35,62,33,-66,32,-66,31,-66,30,-66,5,-66,8,-66,4,-66,11,-66,7,-66});
    states[30] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-17,31,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[31] = new State(-64);
    states[32] = new State(new int[]{36,33,37,56,38,58,39,60,34,-71,35,-71,33,-71,32,-71,31,-71,30,-71,5,-71,8,-71,4,-71,11,-71,7,-71});
    states[33] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-18,34,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[34] = new State(-67);
    states[35] = new State(new int[]{40,36,41,54,36,-74,37,-74,38,-74,39,-74,34,-74,35,-74,33,-74,32,-74,31,-74,30,-74,5,-74,8,-74,4,-74,11,-74,7,-74});
    states[36] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-19,37,-20,35,-21,38,-22,47,-10,49});
    states[37] = new State(-72);
    states[38] = new State(new int[]{42,39,40,-76,41,-76,36,-76,37,-76,38,-76,39,-76,34,-76,35,-76,33,-76,32,-76,31,-76,30,-76,5,-76,8,-76,4,-76,11,-76,7,-76});
    states[39] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-20,40,-21,38,-22,47,-10,49});
    states[40] = new State(-75);
    states[41] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-21,42,-22,47,-10,49});
    states[42] = new State(-77);
    states[43] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-21,44,-22,47,-10,49});
    states[44] = new State(-78);
    states[45] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-21,46,-22,47,-10,49});
    states[46] = new State(-79);
    states[47] = new State(-80);
    states[48] = new State(-81);
    states[49] = new State(-82);
    states[50] = new State(-51);
    states[51] = new State(-52);
    states[52] = new State(-53);
    states[53] = new State(-83);
    states[54] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-19,55,-20,35,-21,38,-22,47,-10,49});
    states[55] = new State(-73);
    states[56] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-18,57,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[57] = new State(-68);
    states[58] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-18,59,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[59] = new State(-69);
    states[60] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-18,61,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[61] = new State(-70);
    states[62] = new State(new int[]{43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-17,63,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[63] = new State(-65);
    states[64] = new State(-55);
    states[65] = new State(-45);
    states[66] = new State(-46);
    states[67] = new State(-47);
    states[68] = new State(-14);
    states[69] = new State(-15);
    states[70] = new State(-16);
    states[71] = new State(-17);
    states[72] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,73,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[73] = new State(-18);
    states[74] = new State(new int[]{47,50,48,51,50,52},new int[]{-10,75});
    states[75] = new State(-19);
    states[76] = new State(new int[]{47,50,48,51,50,52},new int[]{-10,77});
    states[77] = new State(-20);
    states[78] = new State(new int[]{47,50,48,51,50,52},new int[]{-10,79});
    states[79] = new State(-21);
    states[80] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,81,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[81] = new State(-22);
    states[82] = new State(new int[]{47,50,48,51,50,52},new int[]{-10,83});
    states[83] = new State(new int[]{5,84});
    states[84] = new State(new int[]{29,85});
    states[85] = new State(new int[]{47,86});
    states[86] = new State(-23);
    states[87] = new State(new int[]{47,50,48,51,50,52},new int[]{-10,88});
    states[88] = new State(new int[]{5,89});
    states[89] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,90,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[90] = new State(-24);
    states[91] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,92,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[92] = new State(-25);
    states[93] = new State(new int[]{47,50,48,51,50,52},new int[]{-10,94});
    states[94] = new State(new int[]{5,95});
    states[95] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,96,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[96] = new State(new int[]{5,97,8,-26,4,-26});
    states[97] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,98,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[98] = new State(-27);
    states[99] = new State(new int[]{47,50,48,51,50,52,46,110},new int[]{-11,100,-10,109});
    states[100] = new State(new int[]{5,101,8,-28,4,-28});
    states[101] = new State(new int[]{46,102});
    states[102] = new State(new int[]{5,103,8,-29,4,-29});
    states[103] = new State(new int[]{29,104});
    states[104] = new State(new int[]{47,105});
    states[105] = new State(new int[]{5,106,8,-30,4,-30});
    states[106] = new State(new int[]{47,107,45,108});
    states[107] = new State(-31);
    states[108] = new State(-32);
    states[109] = new State(-33);
    states[110] = new State(-34);
    states[111] = new State(-8);
    states[112] = new State(new int[]{6,113,10,122,43,-39,44,-39,41,-39,46,-39,47,-39,48,-39,50,-39,45,-39,8,-39,4,-39},new int[]{-7,114});
    states[113] = new State(-35);
    states[114] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53,8,-38,4,-38},new int[]{-12,115,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[115] = new State(new int[]{5,120,7,-41,8,-41,4,-41},new int[]{-23,116});
    states[116] = new State(new int[]{7,118,8,-43,4,-43},new int[]{-24,117});
    states[117] = new State(-37);
    states[118] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,119,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[119] = new State(-44);
    states[120] = new State(new int[]{10,14,43,41,44,43,41,45,46,48,47,50,48,51,50,52,45,53},new int[]{-12,121,-13,64,-14,17,-15,20,-16,23,-17,26,-18,29,-19,32,-20,35,-21,38,-22,47,-10,49});
    states[121] = new State(-42);
    states[122] = new State(new int[]{49,123});
    states[123] = new State(new int[]{50,124});
    states[124] = new State(new int[]{11,125});
    states[125] = new State(-40);
    states[126] = new State(new int[]{6,127});
    states[127] = new State(-36);
    states[128] = new State(new int[]{8,129,4,130});
    states[129] = new State(-9);
    states[130] = new State(-10);
    states[131] = new State(-11);
    states[132] = new State(-12);
    states[133] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-25, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-2});
    rules[4] = new Rule(-2, new int[]{-3});
    rules[5] = new Rule(-2, new int[]{-2,-3});
    rules[6] = new Rule(-3, new int[]{-5,8,4});
    rules[7] = new Rule(-3, new int[]{-5,4});
    rules[8] = new Rule(-3, new int[]{-6});
    rules[9] = new Rule(-3, new int[]{-4,8});
    rules[10] = new Rule(-3, new int[]{-4,4});
    rules[11] = new Rule(-3, new int[]{8});
    rules[12] = new Rule(-3, new int[]{4});
    rules[13] = new Rule(-5, new int[]{-9,-8});
    rules[14] = new Rule(-5, new int[]{12});
    rules[15] = new Rule(-5, new int[]{13});
    rules[16] = new Rule(-5, new int[]{14});
    rules[17] = new Rule(-5, new int[]{15});
    rules[18] = new Rule(-5, new int[]{16,-12});
    rules[19] = new Rule(-5, new int[]{17,-10});
    rules[20] = new Rule(-5, new int[]{18,-10});
    rules[21] = new Rule(-5, new int[]{19,-10});
    rules[22] = new Rule(-5, new int[]{21,-12});
    rules[23] = new Rule(-5, new int[]{22,-10,5,29,47});
    rules[24] = new Rule(-5, new int[]{23,-10,5,-12});
    rules[25] = new Rule(-5, new int[]{24,-12});
    rules[26] = new Rule(-5, new int[]{20,-10,5,-12});
    rules[27] = new Rule(-5, new int[]{20,-10,5,-12,5,-12});
    rules[28] = new Rule(-5, new int[]{25,-11});
    rules[29] = new Rule(-5, new int[]{25,-11,5,46});
    rules[30] = new Rule(-5, new int[]{25,-11,5,46,5,29,47});
    rules[31] = new Rule(-5, new int[]{25,-11,5,46,5,29,47,5,47});
    rules[32] = new Rule(-5, new int[]{25,-11,5,46,5,29,47,5,45});
    rules[33] = new Rule(-11, new int[]{-10});
    rules[34] = new Rule(-11, new int[]{46});
    rules[35] = new Rule(-6, new int[]{47,6});
    rules[36] = new Rule(-6, new int[]{48,6});
    rules[37] = new Rule(-4, new int[]{47,-7,-12,-23,-24});
    rules[38] = new Rule(-4, new int[]{47,-7});
    rules[39] = new Rule(-7, new int[]{});
    rules[40] = new Rule(-7, new int[]{10,49,50,11});
    rules[41] = new Rule(-23, new int[]{});
    rules[42] = new Rule(-23, new int[]{5,-12});
    rules[43] = new Rule(-24, new int[]{});
    rules[44] = new Rule(-24, new int[]{7,-12});
    rules[45] = new Rule(-9, new int[]{26});
    rules[46] = new Rule(-9, new int[]{27});
    rules[47] = new Rule(-9, new int[]{28});
    rules[48] = new Rule(-8, new int[]{});
    rules[49] = new Rule(-8, new int[]{-12});
    rules[50] = new Rule(-8, new int[]{-12,5,-8});
    rules[51] = new Rule(-10, new int[]{47});
    rules[52] = new Rule(-10, new int[]{48});
    rules[53] = new Rule(-10, new int[]{50});
    rules[54] = new Rule(-12, new int[]{10,-13,11});
    rules[55] = new Rule(-12, new int[]{-13});
    rules[56] = new Rule(-13, new int[]{-14,30,-13});
    rules[57] = new Rule(-13, new int[]{-14});
    rules[58] = new Rule(-14, new int[]{-15,31,-14});
    rules[59] = new Rule(-14, new int[]{-15});
    rules[60] = new Rule(-15, new int[]{-16,32,-15});
    rules[61] = new Rule(-15, new int[]{-16});
    rules[62] = new Rule(-16, new int[]{-17,33,-16});
    rules[63] = new Rule(-16, new int[]{-17});
    rules[64] = new Rule(-17, new int[]{-18,34,-17});
    rules[65] = new Rule(-17, new int[]{-18,35,-17});
    rules[66] = new Rule(-17, new int[]{-18});
    rules[67] = new Rule(-18, new int[]{-19,36,-18});
    rules[68] = new Rule(-18, new int[]{-19,37,-18});
    rules[69] = new Rule(-18, new int[]{-19,38,-18});
    rules[70] = new Rule(-18, new int[]{-19,39,-18});
    rules[71] = new Rule(-18, new int[]{-19});
    rules[72] = new Rule(-19, new int[]{-20,40,-19});
    rules[73] = new Rule(-19, new int[]{-20,41,-19});
    rules[74] = new Rule(-19, new int[]{-20});
    rules[75] = new Rule(-20, new int[]{-21,42,-20});
    rules[76] = new Rule(-20, new int[]{-21});
    rules[77] = new Rule(-21, new int[]{43,-21});
    rules[78] = new Rule(-21, new int[]{44,-21});
    rules[79] = new Rule(-21, new int[]{41,-21});
    rules[80] = new Rule(-21, new int[]{-22});
    rules[81] = new Rule(-22, new int[]{46});
    rules[82] = new Rule(-22, new int[]{-10});
    rules[83] = new Rule(-22, new int[]{45});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // file -> /* empty */
#line 36 "jcasm.y"
                 { output = new StatementList(); }
#line default
        break;
      case 3: // file -> stmtlist
#line 37 "jcasm.y"
                    { output = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 4: // stmtlist -> stmt
#line 40 "jcasm.y"
                        { StatementList sl = new StatementList(); sl.list = new List<Statement>(); sl.list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = sl; }
#line default
        break;
      case 5: // stmtlist -> stmtlist, stmt
#line 41 "jcasm.y"
                       { ((StatementList)ValueStack[ValueStack.Depth-2].stmtval).list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 6: // stmt -> directive, SEMICOLON, NEWLINE
#line 44 "jcasm.y"
                                      { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-3].stmtval; }
#line default
        break;
      case 7: // stmt -> directive, NEWLINE
#line 45 "jcasm.y"
                          { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 8: // stmt -> line_label
#line 46 "jcasm.y"
                     { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 9: // stmt -> instruction, SEMICOLON
#line 47 "jcasm.y"
                             { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 10: // stmt -> instruction, NEWLINE
#line 48 "jcasm.y"
                            { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 13: // directive -> data_directive, data_list
#line 53 "jcasm.y"
                                       { CurrentSemanticValue.stmtval = new DataDirective { directive = ValueStack[ValueStack.Depth-2].ddtype, data = ValueStack[ValueStack.Depth-1].dilist }; }
#line default
        break;
      case 14: // directive -> TEXT
#line 54 "jcasm.y"
                 { CurrentSemanticValue.stmtval = new SectionHeader { name = ".text" }; }
#line default
        break;
      case 15: // directive -> DATA
#line 55 "jcasm.y"
                 { CurrentSemanticValue.stmtval = new SectionHeader { name = ".data" }; }
#line default
        break;
      case 16: // directive -> RODATA
#line 56 "jcasm.y"
                  { CurrentSemanticValue.stmtval = new SectionHeader { name = ".rodata" }; }
#line default
        break;
      case 17: // directive -> BSS
#line 57 "jcasm.y"
                { CurrentSemanticValue.stmtval = new SectionHeader { name = ".bss" }; }
#line default
        break;
      case 18: // directive -> FILE, expr
#line 58 "jcasm.y"
                    { CurrentSemanticValue.stmtval = null; }
#line default
        break;
      case 19: // directive -> GLOBL, anylabel
#line 59 "jcasm.y"
                        { CurrentSemanticValue.stmtval = null; Program.global_objs[ValueStack[ValueStack.Depth-1].strval] = null; }
#line default
        break;
      case 20: // directive -> LOCAL, anylabel
#line 60 "jcasm.y"
                        { CurrentSemanticValue.stmtval = null; }
#line default
        break;
      case 21: // directive -> EXTERN, anylabel
#line 61 "jcasm.y"
                         { CurrentSemanticValue.stmtval = null; Program.extern_objs.Add(ValueStack[ValueStack.Depth-1].strval); }
#line default
        break;
      case 22: // directive -> ALIGN, expr
#line 62 "jcasm.y"
                     { CurrentSemanticValue.stmtval = null; }
#line default
        break;
      case 23: // directive -> TYPE, anylabel, COMMA, AT, LABEL
#line 63 "jcasm.y"
                                   { CurrentSemanticValue.stmtval = null; Program.obj_types[ValueStack[ValueStack.Depth-4].strval] = ValueStack[ValueStack.Depth-1].strval; }
#line default
        break;
      case 24: // directive -> SIZE, anylabel, COMMA, expr
#line 64 "jcasm.y"
                                { CurrentSemanticValue.stmtval = null; Program.obj_sizes[ValueStack[ValueStack.Depth-3].strval] = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 25: // directive -> IDENT, expr
#line 65 "jcasm.y"
                     { CurrentSemanticValue.stmtval = null; }
#line default
        break;
      case 26: // directive -> COMM, anylabel, COMMA, expr
#line 66 "jcasm.y"
                                { CurrentSemanticValue.stmtval = null; Program.comm_objs[ValueStack[ValueStack.Depth-3].strval] = new CommonSymbol { Size = ValueStack[ValueStack.Depth-1].exprval, Align = null }; }
#line default
        break;
      case 27: // directive -> COMM, anylabel, COMMA, expr, COMMA, expr
#line 67 "jcasm.y"
                                           { CurrentSemanticValue.stmtval = null; Program.comm_objs[ValueStack[ValueStack.Depth-5].strval] = new CommonSymbol { Size = ValueStack[ValueStack.Depth-3].exprval, Align = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 28: // directive -> SECTION, sectionname
#line 68 "jcasm.y"
                            { CurrentSemanticValue.stmtval = new SectionHeader { name = ValueStack[ValueStack.Depth-1].strval }; Program.RegisterSection(ValueStack[ValueStack.Depth-1].strval, null, null, null); }
#line default
        break;
      case 29: // directive -> SECTION, sectionname, COMMA, STRING
#line 69 "jcasm.y"
                                       { CurrentSemanticValue.stmtval = new SectionHeader { name = ValueStack[ValueStack.Depth-3].strval }; Program.RegisterSection(ValueStack[ValueStack.Depth-3].strval, ValueStack[ValueStack.Depth-1].strval, null, null); }
#line default
        break;
      case 30: // directive -> SECTION, sectionname, COMMA, STRING, COMMA, AT, LABEL
#line 70 "jcasm.y"
                                                      { CurrentSemanticValue.stmtval = new SectionHeader { name = ValueStack[ValueStack.Depth-6].strval }; Program.RegisterSection(ValueStack[ValueStack.Depth-6].strval, ValueStack[ValueStack.Depth-4].strval, ValueStack[ValueStack.Depth-1].strval, null); }
#line default
        break;
      case 31: // directive -> SECTION, sectionname, COMMA, STRING, COMMA, AT, LABEL, COMMA, 
               //              LABEL
#line 71 "jcasm.y"
                                                                 { CurrentSemanticValue.stmtval = new SectionHeader { name = ValueStack[ValueStack.Depth-8].strval }; Program.RegisterSection(ValueStack[ValueStack.Depth-8].strval, ValueStack[ValueStack.Depth-6].strval, ValueStack[ValueStack.Depth-3].strval, ValueStack[ValueStack.Depth-1].strval); }
#line default
        break;
      case 32: // directive -> SECTION, sectionname, COMMA, STRING, COMMA, AT, LABEL, COMMA, INT
#line 72 "jcasm.y"
                                                               { CurrentSemanticValue.stmtval = new SectionHeader { name = ValueStack[ValueStack.Depth-8].strval }; Program.RegisterSection(ValueStack[ValueStack.Depth-8].strval, ValueStack[ValueStack.Depth-6].strval, ValueStack[ValueStack.Depth-3].strval, ValueStack[ValueStack.Depth-1].intval.ToString()); }
#line default
        break;
      case 33: // sectionname -> anylabel
#line 75 "jcasm.y"
                             { CurrentSemanticValue.strval = ValueStack[ValueStack.Depth-1].strval; }
#line default
        break;
      case 34: // sectionname -> STRING
#line 76 "jcasm.y"
                  { CurrentSemanticValue.strval = ValueStack[ValueStack.Depth-1].strval; }
#line default
        break;
      case 35: // line_label -> LABEL, COLON
#line 79 "jcasm.y"
                              { CurrentSemanticValue.stmtval = new LineLabel { name = ValueStack[ValueStack.Depth-2].strval }; Program.cur_label = ValueStack[ValueStack.Depth-2].strval; }
#line default
        break;
      case 36: // line_label -> LOCLABEL, COLON
#line 80 "jcasm.y"
                        { CurrentSemanticValue.stmtval = new LineLabel { name = ValueStack[ValueStack.Depth-2].strval }; }
#line default
        break;
      case 37: // instruction -> LABEL, cond, expr, operand2, dest
#line 83 "jcasm.y"
                                             { CurrentSemanticValue.stmtval = new Instruction { op = ValueStack[ValueStack.Depth-5].strval, cond = ValueStack[ValueStack.Depth-4].condval, srca = ValueStack[ValueStack.Depth-3].exprval, srcb = ValueStack[ValueStack.Depth-2].exprval, dest = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 38: // instruction -> LABEL, cond
#line 84 "jcasm.y"
                     { CurrentSemanticValue.stmtval = new Instruction { op = ValueStack[ValueStack.Depth-2].strval, cond = ValueStack[ValueStack.Depth-1].condval, srca = null, srcb = null, dest = null }; }
#line default
        break;
      case 39: // cond -> /* empty */
#line 87 "jcasm.y"
                 { CurrentSemanticValue.condval = new Condition { ctype = Condition.CType.Always}; }
#line default
        break;
      case 40: // cond -> LPAREN, CC, REG, RPAREN
#line 88 "jcasm.y"
                             { CurrentSemanticValue.condval = new Condition(ValueStack[ValueStack.Depth-3].strval, ValueStack[ValueStack.Depth-2].strval); }
#line default
        break;
      case 41: // operand2 -> /* empty */
#line 91 "jcasm.y"
                    { CurrentSemanticValue.exprval = null; }
#line default
        break;
      case 42: // operand2 -> COMMA, expr
#line 92 "jcasm.y"
                    { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 43: // dest -> /* empty */
#line 95 "jcasm.y"
                 { CurrentSemanticValue.exprval = null; }
#line default
        break;
      case 44: // dest -> ASSIGN, expr
#line 96 "jcasm.y"
                     { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 45: // data_directive -> DB
#line 99 "jcasm.y"
                          { CurrentSemanticValue.ddtype = DataDirective.DDType.Byte; }
#line default
        break;
      case 46: // data_directive -> DW
#line 100 "jcasm.y"
               { CurrentSemanticValue.ddtype = DataDirective.DDType.Word; }
#line default
        break;
      case 47: // data_directive -> DD
#line 101 "jcasm.y"
               { CurrentSemanticValue.ddtype = DataDirective.DDType.DWord; }
#line default
        break;
      case 48: // data_list -> /* empty */
#line 104 "jcasm.y"
                    { CurrentSemanticValue.dilist = new List<Expression>(); }
#line default
        break;
      case 49: // data_list -> expr
#line 105 "jcasm.y"
                 { CurrentSemanticValue.dilist = new List<Expression> { ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 50: // data_list -> expr, COMMA, data_list
#line 106 "jcasm.y"
                             { CurrentSemanticValue.dilist = new List<Expression>(); CurrentSemanticValue.dilist.Add(ValueStack[ValueStack.Depth-3].exprval); CurrentSemanticValue.dilist.AddRange(ValueStack[ValueStack.Depth-1].dilist); }
#line default
        break;
      case 51: // anylabel -> LABEL
#line 109 "jcasm.y"
                        { CurrentSemanticValue.strval = ValueStack[ValueStack.Depth-1].strval; }
#line default
        break;
      case 52: // anylabel -> LOCLABEL
#line 110 "jcasm.y"
                    { CurrentSemanticValue.strval = ValueStack[ValueStack.Depth-1].strval; }
#line default
        break;
      case 53: // anylabel -> REG
#line 111 "jcasm.y"
                { CurrentSemanticValue.strval = ValueStack[ValueStack.Depth-1].strval; }
#line default
        break;
      case 54: // expr -> LPAREN, expr2, RPAREN
#line 114 "jcasm.y"
                                { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-2].exprval; }
#line default
        break;
      case 55: // expr -> expr2
#line 115 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 56: // expr2 -> expr3, LOR, expr2
#line 118 "jcasm.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LOR }; }
#line default
        break;
      case 57: // expr2 -> expr3
#line 119 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 58: // expr3 -> expr4, LAND, expr3
#line 122 "jcasm.y"
                              { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LAND }; }
#line default
        break;
      case 59: // expr3 -> expr4
#line 123 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 60: // expr4 -> expr5, OR, expr4
#line 126 "jcasm.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.OR }; }
#line default
        break;
      case 61: // expr4 -> expr5
#line 127 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 62: // expr5 -> expr6, AND, expr5
#line 130 "jcasm.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.AND }; }
#line default
        break;
      case 63: // expr5 -> expr6
#line 131 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 64: // expr6 -> expr7, EQUALS, expr6
#line 134 "jcasm.y"
                               { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.EQUALS }; }
#line default
        break;
      case 65: // expr6 -> expr7, NOTEQUAL, expr6
#line 135 "jcasm.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.NOTEQUAL }; }
#line default
        break;
      case 66: // expr6 -> expr7
#line 136 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 67: // expr7 -> expr8, LT, expr7
#line 139 "jcasm.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LT }; }
#line default
        break;
      case 68: // expr7 -> expr8, GT, expr7
#line 140 "jcasm.y"
                        { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GT }; }
#line default
        break;
      case 69: // expr7 -> expr8, LEQUAL, expr7
#line 141 "jcasm.y"
                           { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LEQUAL }; }
#line default
        break;
      case 70: // expr7 -> expr8, GEQUAL, expr7
#line 142 "jcasm.y"
                           { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GEQUAL }; }
#line default
        break;
      case 71: // expr7 -> expr8
#line 143 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 72: // expr8 -> expr9, PLUS, expr8
#line 146 "jcasm.y"
                              { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.PLUS }; }
#line default
        break;
      case 73: // expr8 -> expr9, MINUS, expr8
#line 147 "jcasm.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MINUS }; }
#line default
        break;
      case 74: // expr8 -> expr9
#line 148 "jcasm.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 75: // expr9 -> expr10, MUL, expr9
#line 151 "jcasm.y"
                              { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MUL }; }
#line default
        break;
      case 76: // expr9 -> expr10
#line 152 "jcasm.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 77: // expr10 -> NOT, expr10
#line 155 "jcasm.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.NOT }; }
#line default
        break;
      case 78: // expr10 -> LNOT, expr10
#line 156 "jcasm.y"
                      { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.LNOT }; }
#line default
        break;
      case 79: // expr10 -> MINUS, expr10
#line 157 "jcasm.y"
                       { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.MINUS }; }
#line default
        break;
      case 80: // expr10 -> expr11
#line 158 "jcasm.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 81: // expr11 -> STRING
#line 161 "jcasm.y"
                       { CurrentSemanticValue.exprval = new StringExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 82: // expr11 -> anylabel
#line 162 "jcasm.y"
                    { CurrentSemanticValue.exprval = new LabelExpression { val = ValueStack[ValueStack.Depth-1].strval, cur_outer_label = Program.cur_label }; }
#line default
        break;
      case 83: // expr11 -> INT
#line 163 "jcasm.y"
                { CurrentSemanticValue.exprval = new IntExpression { val = ValueStack[ValueStack.Depth-1].intval }; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 168 "jcasm.y"

internal Statement output;
#line default
}
}
